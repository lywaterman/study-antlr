/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.2
 *
 *     -  From the grammar source file : hehe.g
 *     -                            On : 2015-11-09 12:02:07
 *     -                 for the lexer : heheLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "heheLexer.hpp"
/* ----------------------------------------- */




/** String literals used by heheLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x3C, 0x3C, 0x65, 0x6C, 0x73, 0x65, 0x3E, 0x3E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_2[]  = { 0x3C, 0x3C, 0x65, 0x6C, 0x73, 0x65, 0x69, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_3[]  = { 0x3C, 0x3C, 0x65, 0x6E, 0x64, 0x69, 0x66, 0x3E, 0x3E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_4[]  = { 0x3C, 0x3C, 0x69, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_5[]  = { 0x3C, 0x3C, 0x73, 0x65, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_6[]  = { 0x3A, 0x3A,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_7[]  = { 0x69, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_8[]  = { 0x2B, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_9[]  = { 0x2D, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_10[]  = { 0x5B, 0x5B,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_11[]  = { 0x5D, 0x5D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_12[]  = { 0x3C, 0x3C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_13[]  = { 0x3E, 0x3E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_14[]  = { 0x67, 0x74, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_15[]  = { 0x73, 0x65, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_16[]  = { 0x3C, 0x3C, 0x73, 0x69, 0x6C, 0x65, 0x6E, 0x74, 0x6C, 0x79, 0x3E, 0x3E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_17[]  = { 0x3C, 0x3C, 0x65, 0x6E, 0x64, 0x73, 0x69, 0x6C, 0x65, 0x6E, 0x74, 0x6C, 0x79, 0x3E, 0x3E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_18[]  = { 0x63, 0x68, 0x6F, 0x69, 0x63, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_19[]  = { 0x69, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_20[]  = { 0x65, 0x6C, 0x73, 0x65, 0x69, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_21[]  = { 0x65, 0x6E, 0x64, 0x69, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_22[]  = { 0x64, 0x65, 0x6C, 0x61, 0x79,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_23[]  = { 0x61, 0x6E, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_24[]  = { 0x6F, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_25[]  = { 0x74, 0x72, 0x75, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_26[]  = { 0x66, 0x61, 0x6C, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_27[]  = { 0x2F, 0x2F,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_28[]  = { 0x0D, 0x0A,  antlr3::ANTLR_STRING_TERMINATOR};



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



heheLexer::~heheLexer()
{
}

void
heheLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "hehe.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* heheLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called heheLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pheheLexer initialized for the lex start
 *     - Fail NULL
 */
heheLexer::heheLexer(StreamType* instream)
:heheLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called heheLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pheheLexer initialized for the lex start
 *     - Fail NULL
 */
heheLexer::heheLexer(StreamType* instream, RecognizerSharedStateType* state)
:heheLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void heheLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in heheLexer.h here so you can get a sense
     * of what goes where.
     */

}


/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    131:1: Time : ( Int 's' | Int 'm' );
 */
static const ANTLR_INT32 dfa1_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR_INT32 dfa1_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR_INT32 dfa1_min[4] =
    {
	48, 48, -1, -1
    };
static const ANTLR_INT32 dfa1_max[4] =
    {
	57, 115, -1, -1
    };
static const ANTLR_INT32 dfa1_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR_INT32 dfa1_special[4] =
    {
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa1_T_empty	 =   NULL;

static const ANTLR_INT32 dfa1_T0[] =
    {
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 3, -1, -1, -1, -1, -1, 2
    };

static const ANTLR_INT32 dfa1_T1[] =
    {
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa1_transitions[] =
{
    dfa1_T1, dfa1_T0, NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 1
 */
class heheLexerCyclicDFA1 : public CyclicDFA< heheLexerImplTraits, heheLexer >, public heheLexerTokens
{
public:
	typedef CyclicDFA< heheLexerImplTraits, heheLexer >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	heheLexerCyclicDFA1( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static heheLexerCyclicDFA1  cdfa1(
	    1,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"131:1: Time : ( Int 's' | Int 'm' );",
	    dfa1_eot,	    /* EOT table			    */
	    dfa1_eof,	    /* EOF table			    */
	    dfa1_min,	    /* Minimum tokens for each state    */
	    dfa1_max,	    /* Maximum tokens for each state    */
	    dfa1_accept,	/* Accept table			    */
	    dfa1_special,	/* Special transition states	    */
	    dfa1_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 1
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | FuncDec | Equal | Minus | Dollar | Assign | PlusAssign | MinusAssign | DoubleOpenSquareBracket | DoubleCloseSquareBracket | ShiftLeft | ShiftRight | VarName | ThenFunc | Or | Gte | Set | Silently | EndSilently | Choice | ChoiceLeft | If | ElseIf | EndIf | Delay | AndAnd | OrOr | Time | Int | True | False | LINE_COMMENT | String | Label | TEXT | WS );
 */
static const ANTLR_INT32 dfa8_eot[100] =
    {
	-1, 28, -1, -1, 24, 33, 34, -1, -1, -1, -1, 36, 24, 24, 24, 24, 24, 24, 
	24, 46, 24, 24, -1, -1, -1, -1, -1, -1, -1, 53, 55, 56, -1, -1, -1, -1, 
	-1, -1, 24, 24, 24, 24, 24, 24, 24, 64, -1, -1, 24, 24, -1, -1, -1, -1, 
	-1, -1, -1, 71, 72, 24, 24, 24, 24, 77, -1, 24, 24, -1, -1, -1, -1, -1, 
	-1, 24, 24, 24, 24, -1, 86, 24, -1, -1, 24, 24, 93, 94, -1, 95, -1, -1, 
	-1, 98, 99, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa8_eof[100] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa8_min[100] =
    {
	10, 61, 60, -1, 102, 61, 65, -1, -1, -1, -1, 65, 116, 101, 104, 108, 101, 
	110, 114, 48, 114, 97, -1, -1, -1, -1, -1, -1, -1, 99, 48, 48, -1, -1, 
	-1, -1, -1, -1, 101, 116, 111, 115, 100, 108, 100, 48, -1, -1, 117, 108, 
	108, -1, 101, -1, -1, -1, -1, 48, 48, 105, 101, 105, 97, 48, -1, 101, 115, 
	115, 100, -1, -1, -1, -1, 99, 105, 102, 121, -1, 48, 101, 101, 105, 101, 
	102, 48, 48, -1, 48, 62, -1, -1, 48, 48, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa8_max[100] =
    {
	124, 61, 60, -1, 115, 61, 122, -1, -1, -1, -1, 122, 116, 101, 104, 110, 
	101, 110, 114, 115, 114, 97, -1, -1, -1, -1, -1, -1, -1, 115, 122, 122, 
	-1, -1, -1, -1, -1, -1, 101, 116, 111, 115, 100, 108, 100, 122, -1, -1, 
	117, 108, 110, -1, 105, -1, -1, -1, -1, 122, 122, 105, 101, 105, 97, 122, 
	-1, 101, 115, 115, 100, -1, -1, -1, -1, 99, 105, 102, 121, -1, 122, 101, 
	101, 115, 101, 102, 122, 122, -1, 122, 105, -1, -1, 122, 122, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR_INT32 dfa8_accept[100] =
    {
	-1, -1, -1, 7, -1, -1, -1, 11, 14, 15, 17, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 37, 38, 39, 40, 41, 12, 1, -1, -1, -1, 13, 9, 10, 18, 20, 
	19, -1, -1, -1, -1, -1, -1, -1, -1, 34, 33, -1, -1, -1, 5, -1, 16, 26, 
	8, 27, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, 6, 23, 21, 22, -1, 
	-1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, 4, 24, -1, 
	-1, 29, 30, 36, 2, 3, 25, 28
    };
static const ANTLR_INT32 dfa8_special[100] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa8_T_empty	 =   NULL;

static const ANTLR_INT32 dfa8_T0[] =
    {
	57
    };

static const ANTLR_INT32 dfa8_T1[] =
    {
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24, -1, -1, -1, -1, -1, -1, -1, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, -1, -1, -1, -1, 24, -1, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24
    };

static const ANTLR_INT32 dfa8_T2[] =
    {
	67, -1, 68
    };

static const ANTLR_INT32 dfa8_T3[] =
    {
	40
    };

static const ANTLR_INT32 dfa8_T4[] =
    {
	58
    };

static const ANTLR_INT32 dfa8_T5[] =
    {
	29
    };

static const ANTLR_INT32 dfa8_T6[] =
    {
	26, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 26, -1, 23, 25, 6, -1, -1, -1, -1, -1, -1, 1, -1, 5, -1, 
	22, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 3, -1, 2, 7, 10, -1, -1, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 8, -1, 9, -1, 24, -1, 17, 24, 14, 16, 15, 21, 
	12, 24, 4, 24, 24, 24, 24, 24, 18, 24, 24, 24, 13, 20, 24, 24, 24, 24, 
	24, 24, -1, 11
    };

static const ANTLR_INT32 dfa8_T7[] =
    {
	41, -1, 42
    };

static const ANTLR_INT32 dfa8_T8[] =
    {
	38
    };

static const ANTLR_INT32 dfa8_T9[] =
    {
	32
    };

static const ANTLR_INT32 dfa8_T10[] =
    {
	74
    };

static const ANTLR_INT32 dfa8_T11[] =
    {
	60
    };

static const ANTLR_INT32 dfa8_T12[] =
    {
	39
    };

static const ANTLR_INT32 dfa8_T13[] =
    {
	75
    };

static const ANTLR_INT32 dfa8_T14[] =
    {
	84
    };

static const ANTLR_INT32 dfa8_T15[] =
    {
	62
    };

static const ANTLR_INT32 dfa8_T16[] =
    {
	83
    };

static const ANTLR_INT32 dfa8_T17[] =
    {
	92
    };

static const ANTLR_INT32 dfa8_T18[] =
    {
	61
    };

static const ANTLR_INT32 dfa8_T19[] =
    {
	31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30
    };

static const ANTLR_INT32 dfa8_T20[] =
    {
	59
    };

static const ANTLR_INT32 dfa8_T21[] =
    {
	81
    };

static const ANTLR_INT32 dfa8_T22[] =
    {
	73
    };

static const ANTLR_INT32 dfa8_T23[] =
    {
	69, -1, -1, -1, 70
    };

static const ANTLR_INT32 dfa8_T24[] =
    {
	89, -1, -1, -1, -1, -1, -1, -1, -1, -1, 90
    };

static const ANTLR_INT32 dfa8_T25[] =
    {
	82
    };

static const ANTLR_INT32 dfa8_T26[] =
    {
	91
    };

static const ANTLR_INT32 dfa8_T27[] =
    {
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, 47
    };

static const ANTLR_INT32 dfa8_T28[] =
    {
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, -1, -1, -1, -1, 37, -1, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37
    };

static const ANTLR_INT32 dfa8_T29[] =
    {
	96, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 97
    };

static const ANTLR_INT32 dfa8_T30[] =
    {
	80
    };

static const ANTLR_INT32 dfa8_T31[] =
    {
	88
    };

static const ANTLR_INT32 dfa8_T32[] =
    {
	27
    };

static const ANTLR_INT32 dfa8_T33[] =
    {
	76
    };

static const ANTLR_INT32 dfa8_T34[] =
    {
	85
    };

static const ANTLR_INT32 dfa8_T35[] =
    {
	49
    };

static const ANTLR_INT32 dfa8_T36[] =
    {
	48
    };

static const ANTLR_INT32 dfa8_T37[] =
    {
	63
    };

static const ANTLR_INT32 dfa8_T38[] =
    {
	44
    };

static const ANTLR_INT32 dfa8_T39[] =
    {
	54, -1, 50, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52
    };

static const ANTLR_INT32 dfa8_T40[] =
    {
	43
    };

static const ANTLR_INT32 dfa8_T41[] =
    {
	87
    };

static const ANTLR_INT32 dfa8_T42[] =
    {
	79
    };

static const ANTLR_INT32 dfa8_T43[] =
    {
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, 35, -1, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35
    };

static const ANTLR_INT32 dfa8_T44[] =
    {
	65
    };

static const ANTLR_INT32 dfa8_T45[] =
    {
	78
    };

static const ANTLR_INT32 dfa8_T46[] =
    {
	66
    };

static const ANTLR_INT32 dfa8_T47[] =
    {
	45
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa8_transitions[] =
{
    dfa8_T6, dfa8_T32, dfa8_T5, NULL, dfa8_T19, dfa8_T9, dfa8_T43, NULL, 
    NULL, NULL, NULL, dfa8_T28, dfa8_T8, dfa8_T12, dfa8_T3, dfa8_T7, dfa8_T40, 
    dfa8_T38, dfa8_T47, dfa8_T27, dfa8_T36, dfa8_T35, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, dfa8_T39, dfa8_T1, dfa8_T1, NULL, NULL, NULL, 
    NULL, NULL, NULL, dfa8_T0, dfa8_T4, dfa8_T20, dfa8_T11, dfa8_T18, dfa8_T15, 
    dfa8_T37, dfa8_T1, NULL, NULL, dfa8_T44, dfa8_T46, dfa8_T2, NULL, dfa8_T23, 
    NULL, NULL, NULL, NULL, dfa8_T1, dfa8_T1, dfa8_T22, dfa8_T10, dfa8_T13, 
    dfa8_T33, dfa8_T1, NULL, dfa8_T45, dfa8_T42, dfa8_T30, dfa8_T21, NULL, 
    NULL, NULL, NULL, dfa8_T25, dfa8_T16, dfa8_T14, dfa8_T34, NULL, dfa8_T1, 
    dfa8_T41, dfa8_T31, dfa8_T24, dfa8_T26, dfa8_T17, dfa8_T1, dfa8_T1, 
    NULL, dfa8_T1, dfa8_T29, NULL, NULL, dfa8_T1, dfa8_T1, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 8
 */
class heheLexerCyclicDFA8 : public CyclicDFA< heheLexerImplTraits, heheLexer >, public heheLexerTokens
{
public:
	typedef CyclicDFA< heheLexerImplTraits, heheLexer >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	heheLexerCyclicDFA8( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static heheLexerCyclicDFA8  cdfa8(
	    8,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"1:1: Tokens : ( T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | FuncDec | Equal | Minus | Dollar | Assign | PlusAssign | MinusAssign | DoubleOpenSquareBracket | DoubleCloseSquareBracket | ShiftLeft | ShiftRight | VarName | ThenFunc | Or | Gte | Set | Silently | EndSilently | Choice | ChoiceLeft | If | ElseIf | EndIf | Delay | AndAnd | OrOr | Time | Int | True | False | LINE_COMMENT | String | Label | TEXT | WS );",
	    dfa8_eot,	    /* EOT table			    */
	    dfa8_eof,	    /* EOF table			    */
	    dfa8_min,	    /* Minimum tokens for each state    */
	    dfa8_max,	    /* Maximum tokens for each state    */
	    dfa8_accept,	/* Accept table			    */
	    dfa8_special,	/* Special transition states	    */
	    dfa8_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 8
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 7:7: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__40
 *
 * Looks to match the characters the constitute the token T__40
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mT__40()
{
    ANTLR_UINT32	_type;
      

    _type	    = T__40;


    // hehe.g:7:7: ( '+' )
    // hehe.g:7:9: '+'
    {
         this->matchc('+');
        if  (this->hasException())
        {
            goto ruleT__40Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__40Ex; /* Prevent compiler warnings */
    ruleT__40Ex: ;

}
// $ANTLR end T__40

//   Comes from: 8:7: ( '<<else>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__41
 *
 * Looks to match the characters the constitute the token T__41
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mT__41()
{
    ANTLR_UINT32	_type;
      

    _type	    = T__41;


    // hehe.g:8:7: ( '<<else>>' )
    // hehe.g:8:9: '<<else>>'
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleT__41Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__41Ex; /* Prevent compiler warnings */
    ruleT__41Ex: ;

}
// $ANTLR end T__41

//   Comes from: 9:7: ( '<<elseif' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__42
 *
 * Looks to match the characters the constitute the token T__42
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mT__42()
{
    ANTLR_UINT32	_type;
      

    _type	    = T__42;


    // hehe.g:9:7: ( '<<elseif' )
    // hehe.g:9:9: '<<elseif'
    {
        this->matchs(lit_2);
        if  (this->hasException())
        {
            goto ruleT__42Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__42Ex; /* Prevent compiler warnings */
    ruleT__42Ex: ;

}
// $ANTLR end T__42

//   Comes from: 10:7: ( '<<endif>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__43
 *
 * Looks to match the characters the constitute the token T__43
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mT__43()
{
    ANTLR_UINT32	_type;
      

    _type	    = T__43;


    // hehe.g:10:7: ( '<<endif>>' )
    // hehe.g:10:9: '<<endif>>'
    {
        this->matchs(lit_3);
        if  (this->hasException())
        {
            goto ruleT__43Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__43Ex; /* Prevent compiler warnings */
    ruleT__43Ex: ;

}
// $ANTLR end T__43

//   Comes from: 11:7: ( '<<if' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__44
 *
 * Looks to match the characters the constitute the token T__44
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mT__44()
{
    ANTLR_UINT32	_type;
      

    _type	    = T__44;


    // hehe.g:11:7: ( '<<if' )
    // hehe.g:11:9: '<<if'
    {
        this->matchs(lit_4);
        if  (this->hasException())
        {
            goto ruleT__44Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__44Ex; /* Prevent compiler warnings */
    ruleT__44Ex: ;

}
// $ANTLR end T__44

//   Comes from: 12:7: ( '<<set' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__45
 *
 * Looks to match the characters the constitute the token T__45
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mT__45()
{
    ANTLR_UINT32	_type;
      

    _type	    = T__45;


    // hehe.g:12:7: ( '<<set' )
    // hehe.g:12:9: '<<set'
    {
        this->matchs(lit_5);
        if  (this->hasException())
        {
            goto ruleT__45Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__45Ex; /* Prevent compiler warnings */
    ruleT__45Ex: ;

}
// $ANTLR end T__45

//   Comes from: 75:9: ( '::' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FuncDec
 *
 * Looks to match the characters the constitute the token FuncDec
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mFuncDec()
{
    ANTLR_UINT32	_type;
      

    _type	    = FuncDec;


    // hehe.g:75:9: ( '::' )
    // hehe.g:75:11: '::'
    {
        this->matchs(lit_6);
        if  (this->hasException())
        {
            goto ruleFuncDecEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleFuncDecEx; /* Prevent compiler warnings */
    ruleFuncDecEx: ;

}
// $ANTLR end FuncDec

//   Comes from: 77:7: ( 'is' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Equal
 *
 * Looks to match the characters the constitute the token Equal
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mEqual()
{
    ANTLR_UINT32	_type;
      

    _type	    = Equal;


    // hehe.g:77:7: ( 'is' )
    // hehe.g:77:9: 'is'
    {
        this->matchs(lit_7);
        if  (this->hasException())
        {
            goto ruleEqualEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleEqualEx; /* Prevent compiler warnings */
    ruleEqualEx: ;

}
// $ANTLR end Equal

//   Comes from: 79:7: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Minus
 *
 * Looks to match the characters the constitute the token Minus
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mMinus()
{
    ANTLR_UINT32	_type;
      

    _type	    = Minus;


    // hehe.g:79:7: ( '-' )
    // hehe.g:79:9: '-'
    {
         this->matchc('-');
        if  (this->hasException())
        {
            goto ruleMinusEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMinusEx; /* Prevent compiler warnings */
    ruleMinusEx: ;

}
// $ANTLR end Minus

//   Comes from: 81:8: ( '$' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Dollar
 *
 * Looks to match the characters the constitute the token Dollar
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mDollar()
{
    ANTLR_UINT32	_type;
      

    _type	    = Dollar;


    // hehe.g:81:8: ( '$' )
    // hehe.g:81:10: '$'
    {
         this->matchc('$');
        if  (this->hasException())
        {
            goto ruleDollarEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDollarEx; /* Prevent compiler warnings */
    ruleDollarEx: ;

}
// $ANTLR end Dollar

//   Comes from: 83:8: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Assign
 *
 * Looks to match the characters the constitute the token Assign
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mAssign()
{
    ANTLR_UINT32	_type;
      

    _type	    = Assign;


    // hehe.g:83:8: ( '=' )
    // hehe.g:83:10: '='
    {
         this->matchc('=');
        if  (this->hasException())
        {
            goto ruleAssignEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleAssignEx; /* Prevent compiler warnings */
    ruleAssignEx: ;

}
// $ANTLR end Assign

//   Comes from: 84:12: ( '+=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PlusAssign
 *
 * Looks to match the characters the constitute the token PlusAssign
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mPlusAssign()
{
    ANTLR_UINT32	_type;
      

    _type	    = PlusAssign;


    // hehe.g:84:12: ( '+=' )
    // hehe.g:84:14: '+='
    {
        this->matchs(lit_8);
        if  (this->hasException())
        {
            goto rulePlusAssignEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePlusAssignEx; /* Prevent compiler warnings */
    rulePlusAssignEx: ;

}
// $ANTLR end PlusAssign

//   Comes from: 85:13: ( '-=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MinusAssign
 *
 * Looks to match the characters the constitute the token MinusAssign
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mMinusAssign()
{
    ANTLR_UINT32	_type;
      

    _type	    = MinusAssign;


    // hehe.g:85:13: ( '-=' )
    // hehe.g:85:15: '-='
    {
        this->matchs(lit_9);
        if  (this->hasException())
        {
            goto ruleMinusAssignEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMinusAssignEx; /* Prevent compiler warnings */
    ruleMinusAssignEx: ;

}
// $ANTLR end MinusAssign

//   Comes from: 87:24: ( '[[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DoubleOpenSquareBracket
 *
 * Looks to match the characters the constitute the token DoubleOpenSquareBracket
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mDoubleOpenSquareBracket()
{
    ANTLR_UINT32	_type;
      

    _type	    = DoubleOpenSquareBracket;


    // hehe.g:87:24: ( '[[' )
    // hehe.g:87:26: '[['
    {
        this->matchs(lit_10);
        if  (this->hasException())
        {
            goto ruleDoubleOpenSquareBracketEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDoubleOpenSquareBracketEx; /* Prevent compiler warnings */
    ruleDoubleOpenSquareBracketEx: ;

}
// $ANTLR end DoubleOpenSquareBracket

//   Comes from: 88:25: ( ']]' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DoubleCloseSquareBracket
 *
 * Looks to match the characters the constitute the token DoubleCloseSquareBracket
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mDoubleCloseSquareBracket()
{
    ANTLR_UINT32	_type;
      

    _type	    = DoubleCloseSquareBracket;


    // hehe.g:88:25: ( ']]' )
    // hehe.g:88:27: ']]'
    {
        this->matchs(lit_11);
        if  (this->hasException())
        {
            goto ruleDoubleCloseSquareBracketEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDoubleCloseSquareBracketEx; /* Prevent compiler warnings */
    ruleDoubleCloseSquareBracketEx: ;

}
// $ANTLR end DoubleCloseSquareBracket

//   Comes from: 90:10: ( '<<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ShiftLeft
 *
 * Looks to match the characters the constitute the token ShiftLeft
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mShiftLeft()
{
    ANTLR_UINT32	_type;
      

    _type	    = ShiftLeft;


    // hehe.g:90:10: ( '<<' )
    // hehe.g:90:21: '<<'
    {
        this->matchs(lit_12);
        if  (this->hasException())
        {
            goto ruleShiftLeftEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleShiftLeftEx; /* Prevent compiler warnings */
    ruleShiftLeftEx: ;

}
// $ANTLR end ShiftLeft

//   Comes from: 92:11: ( '>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ShiftRight
 *
 * Looks to match the characters the constitute the token ShiftRight
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mShiftRight()
{
    ANTLR_UINT32	_type;
      

    _type	    = ShiftRight;


    // hehe.g:92:11: ( '>>' )
    // hehe.g:92:21: '>>'
    {
        this->matchs(lit_13);
        if  (this->hasException())
        {
            goto ruleShiftRightEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleShiftRightEx; /* Prevent compiler warnings */
    ruleShiftRightEx: ;

}
// $ANTLR end ShiftRight

//   Comes from: 95:8: ( '$' Label )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start VarName
 *
 * Looks to match the characters the constitute the token VarName
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mVarName()
{
    ANTLR_UINT32	_type;
      

    _type	    = VarName;


    // hehe.g:95:8: ( '$' Label )
    // hehe.g:95:10: '$' Label
    {
         this->matchc('$');
        if  (this->hasException())
        {
            goto ruleVarNameEx;
        }


        /* 95:10: '$' Label */
        mLabel();
        if  (this->hasException())
        {
            goto ruleVarNameEx;
        }



    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleVarNameEx; /* Prevent compiler warnings */
    ruleVarNameEx: ;

}
// $ANTLR end VarName

//   Comes from: 97:9: ( Or Label )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ThenFunc
 *
 * Looks to match the characters the constitute the token ThenFunc
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mThenFunc()
{
    ANTLR_UINT32	_type;
      

    _type	    = ThenFunc;


    // hehe.g:97:9: ( Or Label )
    // hehe.g:97:11: Or Label
    {
        /* 97:11: Or Label */
        mOr();
        if  (this->hasException())
        {
            goto ruleThenFuncEx;
        }



        /* 97:11: Or Label */
        mLabel();
        if  (this->hasException())
        {
            goto ruleThenFuncEx;
        }



    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleThenFuncEx; /* Prevent compiler warnings */
    ruleThenFuncEx: ;

}
// $ANTLR end ThenFunc

//   Comes from: 99:4: ( '|' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Or
 *
 * Looks to match the characters the constitute the token Or
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mOr()
{
    ANTLR_UINT32	_type;
      

    _type	    = Or;


    // hehe.g:99:4: ( '|' )
    // hehe.g:99:6: '|'
    {
         this->matchc('|');
        if  (this->hasException())
        {
            goto ruleOrEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOrEx; /* Prevent compiler warnings */
    ruleOrEx: ;

}
// $ANTLR end Or

//   Comes from: 101:5: ( 'gte' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Gte
 *
 * Looks to match the characters the constitute the token Gte
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mGte()
{
    ANTLR_UINT32	_type;
      

    _type	    = Gte;


    // hehe.g:101:5: ( 'gte' )
    // hehe.g:101:7: 'gte'
    {
        this->matchs(lit_14);
        if  (this->hasException())
        {
            goto ruleGteEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleGteEx; /* Prevent compiler warnings */
    ruleGteEx: ;

}
// $ANTLR end Gte

//   Comes from: 103:5: ( 'set' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Set
 *
 * Looks to match the characters the constitute the token Set
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mSet()
{
    ANTLR_UINT32	_type;
      

    _type	    = Set;


    // hehe.g:103:5: ( 'set' )
    // hehe.g:103:7: 'set'
    {
        this->matchs(lit_15);
        if  (this->hasException())
        {
            goto ruleSetEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSetEx; /* Prevent compiler warnings */
    ruleSetEx: ;

}
// $ANTLR end Set

//   Comes from: 106:10: ( '<<silently>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Silently
 *
 * Looks to match the characters the constitute the token Silently
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mSilently()
{
    ANTLR_UINT32	_type;
      

    _type	    = Silently;


    // hehe.g:106:10: ( '<<silently>>' )
    // hehe.g:106:12: '<<silently>>'
    {
        this->matchs(lit_16);
        if  (this->hasException())
        {
            goto ruleSilentlyEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSilentlyEx; /* Prevent compiler warnings */
    ruleSilentlyEx: ;

}
// $ANTLR end Silently

//   Comes from: 107:12: ( '<<endsilently>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EndSilently
 *
 * Looks to match the characters the constitute the token EndSilently
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mEndSilently()
{
    ANTLR_UINT32	_type;
      

    _type	    = EndSilently;


    // hehe.g:107:12: ( '<<endsilently>>' )
    // hehe.g:107:14: '<<endsilently>>'
    {
        this->matchs(lit_17);
        if  (this->hasException())
        {
            goto ruleEndSilentlyEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleEndSilentlyEx; /* Prevent compiler warnings */
    ruleEndSilentlyEx: ;

}
// $ANTLR end EndSilently

//   Comes from: 109:8: ( 'choice' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Choice
 *
 * Looks to match the characters the constitute the token Choice
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mChoice()
{
    ANTLR_UINT32	_type;
      

    _type	    = Choice;


    // hehe.g:109:8: ( 'choice' )
    // hehe.g:109:10: 'choice'
    {
        this->matchs(lit_18);
        if  (this->hasException())
        {
            goto ruleChoiceEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleChoiceEx; /* Prevent compiler warnings */
    ruleChoiceEx: ;

}
// $ANTLR end Choice

//   Comes from: 111:12: ( ShiftLeft Choice )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ChoiceLeft
 *
 * Looks to match the characters the constitute the token ChoiceLeft
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mChoiceLeft()
{
    ANTLR_UINT32	_type;
      

    _type	    = ChoiceLeft;


    // hehe.g:111:12: ( ShiftLeft Choice )
    // hehe.g:111:14: ShiftLeft Choice
    {
        /* 111:14: ShiftLeft Choice */
        mShiftLeft();
        if  (this->hasException())
        {
            goto ruleChoiceLeftEx;
        }



        /* 111:14: ShiftLeft Choice */
        mChoice();
        if  (this->hasException())
        {
            goto ruleChoiceLeftEx;
        }



    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleChoiceLeftEx; /* Prevent compiler warnings */
    ruleChoiceLeftEx: ;

}
// $ANTLR end ChoiceLeft

//   Comes from: 113:4: ( 'if' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start If
 *
 * Looks to match the characters the constitute the token If
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mIf()
{
    ANTLR_UINT32	_type;
      

    _type	    = If;


    // hehe.g:113:4: ( 'if' )
    // hehe.g:113:6: 'if'
    {
        this->matchs(lit_19);
        if  (this->hasException())
        {
            goto ruleIfEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIfEx; /* Prevent compiler warnings */
    ruleIfEx: ;

}
// $ANTLR end If

//   Comes from: 115:8: ( 'elseif' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ElseIf
 *
 * Looks to match the characters the constitute the token ElseIf
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mElseIf()
{
    ANTLR_UINT32	_type;
      

    _type	    = ElseIf;


    // hehe.g:115:8: ( 'elseif' )
    // hehe.g:115:10: 'elseif'
    {
        this->matchs(lit_20);
        if  (this->hasException())
        {
            goto ruleElseIfEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleElseIfEx; /* Prevent compiler warnings */
    ruleElseIfEx: ;

}
// $ANTLR end ElseIf

//   Comes from: 117:7: ( 'endif' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EndIf
 *
 * Looks to match the characters the constitute the token EndIf
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mEndIf()
{
    ANTLR_UINT32	_type;
      

    _type	    = EndIf;


    // hehe.g:117:7: ( 'endif' )
    // hehe.g:117:9: 'endif'
    {
        this->matchs(lit_21);
        if  (this->hasException())
        {
            goto ruleEndIfEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleEndIfEx; /* Prevent compiler warnings */
    ruleEndIfEx: ;

}
// $ANTLR end EndIf

//   Comes from: 119:7: ( 'delay' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Delay
 *
 * Looks to match the characters the constitute the token Delay
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mDelay()
{
    ANTLR_UINT32	_type;
      

    _type	    = Delay;


    // hehe.g:119:7: ( 'delay' )
    // hehe.g:119:9: 'delay'
    {
        this->matchs(lit_22);
        if  (this->hasException())
        {
            goto ruleDelayEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDelayEx; /* Prevent compiler warnings */
    ruleDelayEx: ;

}
// $ANTLR end Delay

//   Comes from: 121:8: ( 'and' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start AndAnd
 *
 * Looks to match the characters the constitute the token AndAnd
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mAndAnd()
{
    ANTLR_UINT32	_type;
      

    _type	    = AndAnd;


    // hehe.g:121:8: ( 'and' )
    // hehe.g:121:10: 'and'
    {
        this->matchs(lit_23);
        if  (this->hasException())
        {
            goto ruleAndAndEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleAndAndEx; /* Prevent compiler warnings */
    ruleAndAndEx: ;

}
// $ANTLR end AndAnd

//   Comes from: 123:6: ( 'or' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OrOr
 *
 * Looks to match the characters the constitute the token OrOr
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mOrOr()
{
    ANTLR_UINT32	_type;
      

    _type	    = OrOr;


    // hehe.g:123:6: ( 'or' )
    // hehe.g:123:8: 'or'
    {
        this->matchs(lit_24);
        if  (this->hasException())
        {
            goto ruleOrOrEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOrOrEx; /* Prevent compiler warnings */
    ruleOrOrEx: ;

}
// $ANTLR end OrOr

//   Comes from: 129:5: ( '0' .. '9' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Digit
 *
 * Looks to match the characters the constitute the token Digit
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mDigit()
{
    ANTLR_UINT32	_type;
      


    // hehe.g:129:5: ( '0' .. '9' )
    // hehe.g:
    {
        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< heheLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleDigitEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleDigitEx; /* Prevent compiler warnings */
    ruleDigitEx: ;

}
// $ANTLR end Digit

//   Comes from: 131:6: ( Int 's' | Int 'm' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Time
 *
 * Looks to match the characters the constitute the token Time
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mTime()
{
    ANTLR_UINT32	_type;
      

    _type	    = Time;


    {
        //  hehe.g:131:6: ( Int 's' | Int 'm' )

        ANTLR_UINT32 alt1;

        alt1=2;

        alt1 = cdfa1.predict(this, this->get_rec(), this->get_istream(), cdfa1 );
        if  (this->hasException())
        {
            goto ruleTimeEx;
        }

        switch (alt1)
        {
    	case 1:
    	    // hehe.g:131:8: Int 's'
    	    {
    	        /* 131:8: Int 's' */
    	        mInt();
    	        if  (this->hasException())
    	        {
    	            goto ruleTimeEx;
    	        }



    	         this->matchc('s');
    	        if  (this->hasException())
    	        {
    	            goto ruleTimeEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // hehe.g:131:17: Int 'm'
    	    {
    	        /* 131:17: Int 'm' */
    	        mInt();
    	        if  (this->hasException())
    	        {
    	            goto ruleTimeEx;
    	        }



    	         this->matchc('m');
    	        if  (this->hasException())
    	        {
    	            goto ruleTimeEx;
    	        }


    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTimeEx; /* Prevent compiler warnings */
    ruleTimeEx: ;

}
// $ANTLR end Time

//   Comes from: 133:5: ( ( Digit )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Int
 *
 * Looks to match the characters the constitute the token Int
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mInt()
{
    ANTLR_UINT32	_type;
      

    _type	    = Int;


    // hehe.g:133:5: ( ( Digit )+ )
    // hehe.g:133:7: ( Digit )+
    {
        // hehe.g:133:7: ( Digit )+
        {
            int cnt2=0;

            for (;;)
            {
                int alt2=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt2=1;
        		}
        	    break;

        	}

        	switch (alt2)
        	{
        	    case 1:
        	        // hehe.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< heheLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleIntEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt2 >= 1 )
        		{
        		    goto loop2;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< heheLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleIntEx;
        	}
        	cnt2++;
            }
            loop2: ;	/* Jump to here if this rule does not match */
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIntEx; /* Prevent compiler warnings */
    ruleIntEx: ;

}
// $ANTLR end Int

//   Comes from: 135:6: ( 'true' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start True
 *
 * Looks to match the characters the constitute the token True
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mTrue()
{
    ANTLR_UINT32	_type;
      

    _type	    = True;


    // hehe.g:135:6: ( 'true' )
    // hehe.g:135:8: 'true'
    {
        this->matchs(lit_25);
        if  (this->hasException())
        {
            goto ruleTrueEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTrueEx; /* Prevent compiler warnings */
    ruleTrueEx: ;

}
// $ANTLR end True

//   Comes from: 137:7: ( 'false' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start False
 *
 * Looks to match the characters the constitute the token False
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mFalse()
{
    ANTLR_UINT32	_type;
      

    _type	    = False;


    // hehe.g:137:7: ( 'false' )
    // hehe.g:137:9: 'false'
    {
        this->matchs(lit_26);
        if  (this->hasException())
        {
            goto ruleFalseEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleFalseEx; /* Prevent compiler warnings */
    ruleFalseEx: ;

}
// $ANTLR end False

//   Comes from: 139:14: ( '//' () ( '\\r\\n' | '\\r' | '\\n' | EOF ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LINE_COMMENT
 *
 * Looks to match the characters the constitute the token LINE_COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mLINE_COMMENT()
{
    ANTLR_UINT32	_type;
      

    _type	    = LINE_COMMENT;


    // hehe.g:139:14: ( '//' () ( '\\r\\n' | '\\r' | '\\n' | EOF ) )
    // hehe.g:139:16: '//' () ( '\\r\\n' | '\\r' | '\\n' | EOF )
    {
        this->matchs(lit_27);
        if  (this->hasException())
        {
            goto ruleLINE_COMMENTEx;
        }




        // hehe.g:139:21: ()
        // hehe.g:139:22: 
        {
        }


        // hehe.g:139:24: ( '\\r\\n' | '\\r' | '\\n' | EOF )
        {
            int alt3=4;
            switch ( this->LA(1) )
            {
            case '\r':
            	{
            		switch ( this->LA(2) )
            		{
            		case '\n':
            			{
            				alt3=1;
            			}
            		    break;

            		default:
            		    alt3=2;
            		}

            	}
                break;
            case '\n':
            	{
            		alt3=3;
            	}
                break;

            default:
                alt3=4;
            }

            switch (alt3)
            {
        	case 1:
        	    // hehe.g:139:25: '\\r\\n'
        	    {
        	        this->matchs(lit_28);
        	        if  (this->hasException())
        	        {
        	            goto ruleLINE_COMMENTEx;
        	        }




        	    }
        	    break;
        	case 2:
        	    // hehe.g:139:32: '\\r'
        	    {
        	         this->matchc('\r');
        	        if  (this->hasException())
        	        {
        	            goto ruleLINE_COMMENTEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // hehe.g:139:37: '\\n'
        	    {
        	         this->matchc('\n');
        	        if  (this->hasException())
        	        {
        	            goto ruleLINE_COMMENTEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // hehe.g:139:42: EOF
        	    {
        	            this->matchc(ANTLR_CHARSTREAM_EOF);
        	            if  (this->hasException())
        	            {
        	                goto ruleLINE_COMMENTEx;
        	            }



        	    }
        	    break;

            }
        }

        {
            this->get_state()->get_channel() = HIDDEN;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLINE_COMMENTEx; /* Prevent compiler warnings */
    ruleLINE_COMMENTEx: ;

}
// $ANTLR end LINE_COMMENT

//   Comes from: 141:7: ( '\"' (~ ( '\"' ) )* '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start String
 *
 * Looks to match the characters the constitute the token String
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mString()
{
    ANTLR_UINT32	_type;
      

    _type	    = String;


    // hehe.g:141:7: ( '\"' (~ ( '\"' ) )* '\"' )
    // hehe.g:141:9: '\"' (~ ( '\"' ) )* '\"'
    {
         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleStringEx;
        }


        // hehe.g:141:13: (~ ( '\"' ) )*

        for (;;)
        {
            int alt4=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA4_0 = this->LA(1);
                if ( (((LA4_0 >= 0x0000) && (LA4_0 <= '!')) || ((LA4_0 >= '#') && (LA4_0 <= 0xFFFF))))
                {
                    alt4=1;
                }

            }
            switch (alt4)
            {
        	case 1:
        	    // hehe.g:
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '!')) || ((this->LA(1) >= '#') && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< heheLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleStringEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop4;	/* break out of the loop */
        	    break;
            }
        }
        loop4: ; /* Jump out to here if this rule does not match */


         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleStringEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleStringEx; /* Prevent compiler warnings */
    ruleStringEx: ;

}
// $ANTLR end String

//   Comes from: 143:6: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Label
 *
 * Looks to match the characters the constitute the token Label
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mLabel()
{
    ANTLR_UINT32	_type;
      

    _type	    = Label;


    // hehe.g:143:6: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
    // hehe.g:143:8: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    {
        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< heheLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleLabelEx;
        }


        // hehe.g:143:39: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*

        for (;;)
        {
            int alt5=2;
            switch ( this->LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt5=1;
            	}
                break;

            }

            switch (alt5)
            {
        	case 1:
        	    // hehe.g:
        	    {
        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< heheLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleLabelEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop5;	/* break out of the loop */
        	    break;
            }
        }
        loop5: ; /* Jump out to here if this rule does not match */


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLabelEx; /* Prevent compiler warnings */
    ruleLabelEx: ;

}
// $ANTLR end Label

//   Comes from: 145:5: ( '#' (~ ( '#' ) )+ '#' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TEXT
 *
 * Looks to match the characters the constitute the token TEXT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mTEXT()
{
    ANTLR_UINT32	_type;
      

    _type	    = TEXT;


    // hehe.g:145:5: ( '#' (~ ( '#' ) )+ '#' )
    // hehe.g:145:7: '#' (~ ( '#' ) )+ '#'
    {
         this->matchc('#');
        if  (this->hasException())
        {
            goto ruleTEXTEx;
        }


        // hehe.g:145:11: (~ ( '#' ) )+
        {
            int cnt6=0;

            for (;;)
            {
                int alt6=2;
        	{
        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	    */
        	    int LA6_0 = this->LA(1);
        	    if ( (((LA6_0 >= 0x0000) && (LA6_0 <= '"')) || ((LA6_0 >= '$') && (LA6_0 <= 0xFFFF))))
        	    {
        	        alt6=1;
        	    }

        	}
        	switch (alt6)
        	{
        	    case 1:
        	        // hehe.g:
        	        {
        	            if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '"')) || ((this->LA(1) >= '$') && (this->LA(1) <= 0xFFFF)) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< heheLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleTEXTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt6 >= 1 )
        		{
        		    goto loop6;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< heheLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleTEXTEx;
        	}
        	cnt6++;
            }
            loop6: ;	/* Jump to here if this rule does not match */
        }

         this->matchc('#');
        if  (this->hasException())
        {
            goto ruleTEXTEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTEXTEx; /* Prevent compiler warnings */
    ruleTEXTEx: ;

}
// $ANTLR end TEXT

//   Comes from: 147:5: ( ( ' ' | '\\r' | '\\n' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void heheLexer::mWS()
{
    ANTLR_UINT32	_type;
      

    _type	    = WS;


    // hehe.g:147:5: ( ( ' ' | '\\r' | '\\n' )+ )
    // hehe.g:147:7: ( ' ' | '\\r' | '\\n' )+
    {
        // hehe.g:147:7: ( ' ' | '\\r' | '\\n' )+
        {
            int cnt7=0;

            for (;;)
            {
                int alt7=2;
        	switch ( this->LA(1) )
        	{
        	case '\n':
        	case '\r':
        	case ' ':
        		{
        			alt7=1;
        		}
        	    break;

        	}

        	switch (alt7)
        	{
        	    case 1:
        	        // hehe.g:
        	        {
        	            if ( this->LA(1) == '\n' || this->LA(1) == '\r' || this->LA(1) == ' ' )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< heheLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleWSEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt7 >= 1 )
        		{
        		    goto loop7;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< heheLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleWSEx;
        	}
        	cnt7++;
            }
            loop7: ;	/* Jump to here if this rule does not match */
        }

        {
            skip();
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
heheLexer::mTokens()
{
    {
        //  hehe.g:1:8: ( T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | FuncDec | Equal | Minus | Dollar | Assign | PlusAssign | MinusAssign | DoubleOpenSquareBracket | DoubleCloseSquareBracket | ShiftLeft | ShiftRight | VarName | ThenFunc | Or | Gte | Set | Silently | EndSilently | Choice | ChoiceLeft | If | ElseIf | EndIf | Delay | AndAnd | OrOr | Time | Int | True | False | LINE_COMMENT | String | Label | TEXT | WS )

        ANTLR_UINT32 alt8;

        alt8=41;

        alt8 = cdfa8.predict(this, this->get_rec(), this->get_istream(), cdfa8 );
        if  (this->hasException())
        {
            goto ruleTokensEx;
        }

        switch (alt8)
        {
    	case 1:
    	    // hehe.g:1:10: T__40
    	    {
    	        /* 1:10: T__40 */
    	        mT__40();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // hehe.g:1:16: T__41
    	    {
    	        /* 1:16: T__41 */
    	        mT__41();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // hehe.g:1:22: T__42
    	    {
    	        /* 1:22: T__42 */
    	        mT__42();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // hehe.g:1:28: T__43
    	    {
    	        /* 1:28: T__43 */
    	        mT__43();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // hehe.g:1:34: T__44
    	    {
    	        /* 1:34: T__44 */
    	        mT__44();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // hehe.g:1:40: T__45
    	    {
    	        /* 1:40: T__45 */
    	        mT__45();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // hehe.g:1:46: FuncDec
    	    {
    	        /* 1:46: FuncDec */
    	        mFuncDec();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // hehe.g:1:54: Equal
    	    {
    	        /* 1:54: Equal */
    	        mEqual();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // hehe.g:1:60: Minus
    	    {
    	        /* 1:60: Minus */
    	        mMinus();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // hehe.g:1:66: Dollar
    	    {
    	        /* 1:66: Dollar */
    	        mDollar();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // hehe.g:1:73: Assign
    	    {
    	        /* 1:73: Assign */
    	        mAssign();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // hehe.g:1:80: PlusAssign
    	    {
    	        /* 1:80: PlusAssign */
    	        mPlusAssign();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // hehe.g:1:91: MinusAssign
    	    {
    	        /* 1:91: MinusAssign */
    	        mMinusAssign();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // hehe.g:1:103: DoubleOpenSquareBracket
    	    {
    	        /* 1:103: DoubleOpenSquareBracket */
    	        mDoubleOpenSquareBracket();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // hehe.g:1:127: DoubleCloseSquareBracket
    	    {
    	        /* 1:127: DoubleCloseSquareBracket */
    	        mDoubleCloseSquareBracket();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // hehe.g:1:152: ShiftLeft
    	    {
    	        /* 1:152: ShiftLeft */
    	        mShiftLeft();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // hehe.g:1:162: ShiftRight
    	    {
    	        /* 1:162: ShiftRight */
    	        mShiftRight();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // hehe.g:1:173: VarName
    	    {
    	        /* 1:173: VarName */
    	        mVarName();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // hehe.g:1:181: ThenFunc
    	    {
    	        /* 1:181: ThenFunc */
    	        mThenFunc();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // hehe.g:1:190: Or
    	    {
    	        /* 1:190: Or */
    	        mOr();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    // hehe.g:1:193: Gte
    	    {
    	        /* 1:193: Gte */
    	        mGte();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    // hehe.g:1:197: Set
    	    {
    	        /* 1:197: Set */
    	        mSet();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    // hehe.g:1:201: Silently
    	    {
    	        /* 1:201: Silently */
    	        mSilently();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 24:
    	    // hehe.g:1:210: EndSilently
    	    {
    	        /* 1:210: EndSilently */
    	        mEndSilently();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 25:
    	    // hehe.g:1:222: Choice
    	    {
    	        /* 1:222: Choice */
    	        mChoice();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 26:
    	    // hehe.g:1:229: ChoiceLeft
    	    {
    	        /* 1:229: ChoiceLeft */
    	        mChoiceLeft();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 27:
    	    // hehe.g:1:240: If
    	    {
    	        /* 1:240: If */
    	        mIf();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 28:
    	    // hehe.g:1:243: ElseIf
    	    {
    	        /* 1:243: ElseIf */
    	        mElseIf();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 29:
    	    // hehe.g:1:250: EndIf
    	    {
    	        /* 1:250: EndIf */
    	        mEndIf();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 30:
    	    // hehe.g:1:256: Delay
    	    {
    	        /* 1:256: Delay */
    	        mDelay();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 31:
    	    // hehe.g:1:262: AndAnd
    	    {
    	        /* 1:262: AndAnd */
    	        mAndAnd();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 32:
    	    // hehe.g:1:269: OrOr
    	    {
    	        /* 1:269: OrOr */
    	        mOrOr();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 33:
    	    // hehe.g:1:274: Time
    	    {
    	        /* 1:274: Time */
    	        mTime();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 34:
    	    // hehe.g:1:279: Int
    	    {
    	        /* 1:279: Int */
    	        mInt();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 35:
    	    // hehe.g:1:283: True
    	    {
    	        /* 1:283: True */
    	        mTrue();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 36:
    	    // hehe.g:1:288: False
    	    {
    	        /* 1:288: False */
    	        mFalse();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 37:
    	    // hehe.g:1:294: LINE_COMMENT
    	    {
    	        /* 1:294: LINE_COMMENT */
    	        mLINE_COMMENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 38:
    	    // hehe.g:1:307: String
    	    {
    	        /* 1:307: String */
    	        mString();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 39:
    	    // hehe.g:1:314: Label
    	    {
    	        /* 1:314: Label */
    	        mLabel();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 40:
    	    // hehe.g:1:320: TEXT
    	    {
    	        /* 1:320: TEXT */
    	        mTEXT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 41:
    	    // hehe.g:1:325: WS
    	    {
    	        /* 1:325: WS */
    	        mWS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */



/* End of code
 * =============================================================================
 */
