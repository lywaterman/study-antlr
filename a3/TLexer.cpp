/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.2
 *
 *     -  From the grammar source file : T.g
 *     -                            On : 2015-11-09 12:33:32
 *     -                 for the lexer : TLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "TLexer.hpp"
/* ----------------------------------------- */




/** String literals used by TLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x3C, 0x3C, 0x65, 0x6C, 0x73, 0x65, 0x3E, 0x3E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_2[]  = { 0x3C, 0x3C, 0x65, 0x6C, 0x73, 0x65, 0x69, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_3[]  = { 0x3C, 0x3C, 0x65, 0x6E, 0x64, 0x69, 0x66, 0x3E, 0x3E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_4[]  = { 0x3C, 0x3C, 0x69, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_5[]  = { 0x3C, 0x3C, 0x73, 0x65, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_6[]  = { 0x3A, 0x3A,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_7[]  = { 0x69, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_8[]  = { 0x2B, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_9[]  = { 0x2D, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_10[]  = { 0x5B, 0x5B,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_11[]  = { 0x5D, 0x5D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_12[]  = { 0x3C, 0x3C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_13[]  = { 0x3E, 0x3E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_14[]  = { 0x67, 0x74, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_15[]  = { 0x73, 0x65, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_16[]  = { 0x3C, 0x3C, 0x73, 0x69, 0x6C, 0x65, 0x6E, 0x74, 0x6C, 0x79, 0x3E, 0x3E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_17[]  = { 0x3C, 0x3C, 0x65, 0x6E, 0x64, 0x73, 0x69, 0x6C, 0x65, 0x6E, 0x74, 0x6C, 0x79, 0x3E, 0x3E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_18[]  = { 0x63, 0x68, 0x6F, 0x69, 0x63, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_19[]  = { 0x69, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_20[]  = { 0x65, 0x6C, 0x73, 0x65, 0x69, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_21[]  = { 0x65, 0x6E, 0x64, 0x69, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_22[]  = { 0x64, 0x65, 0x6C, 0x61, 0x79,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_23[]  = { 0x61, 0x6E, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_24[]  = { 0x6F, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_25[]  = { 0x74, 0x72, 0x75, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_26[]  = { 0x66, 0x61, 0x6C, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_27[]  = { 0x2F, 0x2F,  antlr3::ANTLR_STRING_TERMINATOR};



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



TLexer::~TLexer()
{
}

void
TLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "T.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* TLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called TLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pTLexer initialized for the lex start
 *     - Fail NULL
 */
TLexer::TLexer(StreamType* instream)
:TLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called TLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pTLexer initialized for the lex start
 *     - Fail NULL
 */
TLexer::TLexer(StreamType* instream, RecognizerSharedStateType* state)
:TLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void TLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in TLexer.h here so you can get a sense
     * of what goes where.
     */

}


/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    131:1: Time : ( ( Digit )+ 's' | ( Digit )+ 'm' );
 */
static const ANTLR_INT32 dfa3_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR_INT32 dfa3_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR_INT32 dfa3_min[4] =
    {
	48, 48, -1, -1
    };
static const ANTLR_INT32 dfa3_max[4] =
    {
	57, 115, -1, -1
    };
static const ANTLR_INT32 dfa3_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR_INT32 dfa3_special[4] =
    {
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa3_T_empty	 =   NULL;

static const ANTLR_INT32 dfa3_T0[] =
    {
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };

static const ANTLR_INT32 dfa3_T1[] =
    {
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 3, -1, -1, -1, -1, -1, 2
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa3_transitions[] =
{
    dfa3_T0, dfa3_T1, NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 3
 */
class TLexerCyclicDFA3 : public CyclicDFA< TLexerImplTraits, TLexer >, public TLexerTokens
{
public:
	typedef CyclicDFA< TLexerImplTraits, TLexer >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	TLexerCyclicDFA3( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static TLexerCyclicDFA3  cdfa3(
	    3,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"131:1: Time : ( ( Digit )+ 's' | ( Digit )+ 'm' );",
	    dfa3_eot,	    /* EOT table			    */
	    dfa3_eof,	    /* EOF table			    */
	    dfa3_min,	    /* Minimum tokens for each state    */
	    dfa3_max,	    /* Maximum tokens for each state    */
	    dfa3_accept,	/* Accept table			    */
	    dfa3_special,	/* Special transition states	    */
	    dfa3_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 3
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 7:7: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__39
 *
 * Looks to match the characters the constitute the token T__39
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mT__39()
{
    ANTLR_UINT32	_type;
      

    _type	    = T__39;


    // T.g:7:7: ( '+' )
    // T.g:7:9: '+'
    {
         this->matchc('+');
        if  (this->hasException())
        {
            goto ruleT__39Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__39Ex; /* Prevent compiler warnings */
    ruleT__39Ex: ;

}
// $ANTLR end T__39

//   Comes from: 8:7: ( '<<else>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__40
 *
 * Looks to match the characters the constitute the token T__40
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mT__40()
{
    ANTLR_UINT32	_type;
      

    _type	    = T__40;


    // T.g:8:7: ( '<<else>>' )
    // T.g:8:9: '<<else>>'
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleT__40Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__40Ex; /* Prevent compiler warnings */
    ruleT__40Ex: ;

}
// $ANTLR end T__40

//   Comes from: 9:7: ( '<<elseif' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__41
 *
 * Looks to match the characters the constitute the token T__41
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mT__41()
{
    ANTLR_UINT32	_type;
      

    _type	    = T__41;


    // T.g:9:7: ( '<<elseif' )
    // T.g:9:9: '<<elseif'
    {
        this->matchs(lit_2);
        if  (this->hasException())
        {
            goto ruleT__41Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__41Ex; /* Prevent compiler warnings */
    ruleT__41Ex: ;

}
// $ANTLR end T__41

//   Comes from: 10:7: ( '<<endif>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__42
 *
 * Looks to match the characters the constitute the token T__42
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mT__42()
{
    ANTLR_UINT32	_type;
      

    _type	    = T__42;


    // T.g:10:7: ( '<<endif>>' )
    // T.g:10:9: '<<endif>>'
    {
        this->matchs(lit_3);
        if  (this->hasException())
        {
            goto ruleT__42Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__42Ex; /* Prevent compiler warnings */
    ruleT__42Ex: ;

}
// $ANTLR end T__42

//   Comes from: 11:7: ( '<<if' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__43
 *
 * Looks to match the characters the constitute the token T__43
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mT__43()
{
    ANTLR_UINT32	_type;
      

    _type	    = T__43;


    // T.g:11:7: ( '<<if' )
    // T.g:11:9: '<<if'
    {
        this->matchs(lit_4);
        if  (this->hasException())
        {
            goto ruleT__43Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__43Ex; /* Prevent compiler warnings */
    ruleT__43Ex: ;

}
// $ANTLR end T__43

//   Comes from: 12:7: ( '<<set' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__44
 *
 * Looks to match the characters the constitute the token T__44
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mT__44()
{
    ANTLR_UINT32	_type;
      

    _type	    = T__44;


    // T.g:12:7: ( '<<set' )
    // T.g:12:9: '<<set'
    {
        this->matchs(lit_5);
        if  (this->hasException())
        {
            goto ruleT__44Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__44Ex; /* Prevent compiler warnings */
    ruleT__44Ex: ;

}
// $ANTLR end T__44

//   Comes from: 75:9: ( '::' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FuncDec
 *
 * Looks to match the characters the constitute the token FuncDec
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mFuncDec()
{
    ANTLR_UINT32	_type;
      

    _type	    = FuncDec;


    // T.g:75:9: ( '::' )
    // T.g:75:11: '::'
    {
        this->matchs(lit_6);
        if  (this->hasException())
        {
            goto ruleFuncDecEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleFuncDecEx; /* Prevent compiler warnings */
    ruleFuncDecEx: ;

}
// $ANTLR end FuncDec

//   Comes from: 77:7: ( 'is' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Equal
 *
 * Looks to match the characters the constitute the token Equal
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mEqual()
{
    ANTLR_UINT32	_type;
      

    _type	    = Equal;


    // T.g:77:7: ( 'is' )
    // T.g:77:9: 'is'
    {
        this->matchs(lit_7);
        if  (this->hasException())
        {
            goto ruleEqualEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleEqualEx; /* Prevent compiler warnings */
    ruleEqualEx: ;

}
// $ANTLR end Equal

//   Comes from: 79:7: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Minus
 *
 * Looks to match the characters the constitute the token Minus
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mMinus()
{
    ANTLR_UINT32	_type;
      

    _type	    = Minus;


    // T.g:79:7: ( '-' )
    // T.g:79:9: '-'
    {
         this->matchc('-');
        if  (this->hasException())
        {
            goto ruleMinusEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMinusEx; /* Prevent compiler warnings */
    ruleMinusEx: ;

}
// $ANTLR end Minus

//   Comes from: 81:8: ( '$' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Dollar
 *
 * Looks to match the characters the constitute the token Dollar
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mDollar()
{
    ANTLR_UINT32	_type;
      

    _type	    = Dollar;


    // T.g:81:8: ( '$' )
    // T.g:81:10: '$'
    {
         this->matchc('$');
        if  (this->hasException())
        {
            goto ruleDollarEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDollarEx; /* Prevent compiler warnings */
    ruleDollarEx: ;

}
// $ANTLR end Dollar

//   Comes from: 83:8: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Assign
 *
 * Looks to match the characters the constitute the token Assign
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mAssign()
{
    ANTLR_UINT32	_type;
      

    _type	    = Assign;


    // T.g:83:8: ( '=' )
    // T.g:83:10: '='
    {
         this->matchc('=');
        if  (this->hasException())
        {
            goto ruleAssignEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleAssignEx; /* Prevent compiler warnings */
    ruleAssignEx: ;

}
// $ANTLR end Assign

//   Comes from: 84:12: ( '+=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PlusAssign
 *
 * Looks to match the characters the constitute the token PlusAssign
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mPlusAssign()
{
    ANTLR_UINT32	_type;
      

    _type	    = PlusAssign;


    // T.g:84:12: ( '+=' )
    // T.g:84:14: '+='
    {
        this->matchs(lit_8);
        if  (this->hasException())
        {
            goto rulePlusAssignEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePlusAssignEx; /* Prevent compiler warnings */
    rulePlusAssignEx: ;

}
// $ANTLR end PlusAssign

//   Comes from: 85:13: ( '-=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MinusAssign
 *
 * Looks to match the characters the constitute the token MinusAssign
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mMinusAssign()
{
    ANTLR_UINT32	_type;
      

    _type	    = MinusAssign;


    // T.g:85:13: ( '-=' )
    // T.g:85:15: '-='
    {
        this->matchs(lit_9);
        if  (this->hasException())
        {
            goto ruleMinusAssignEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMinusAssignEx; /* Prevent compiler warnings */
    ruleMinusAssignEx: ;

}
// $ANTLR end MinusAssign

//   Comes from: 87:24: ( '[[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DoubleOpenSquareBracket
 *
 * Looks to match the characters the constitute the token DoubleOpenSquareBracket
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mDoubleOpenSquareBracket()
{
    ANTLR_UINT32	_type;
      

    _type	    = DoubleOpenSquareBracket;


    // T.g:87:24: ( '[[' )
    // T.g:87:26: '[['
    {
        this->matchs(lit_10);
        if  (this->hasException())
        {
            goto ruleDoubleOpenSquareBracketEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDoubleOpenSquareBracketEx; /* Prevent compiler warnings */
    ruleDoubleOpenSquareBracketEx: ;

}
// $ANTLR end DoubleOpenSquareBracket

//   Comes from: 88:25: ( ']]' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DoubleCloseSquareBracket
 *
 * Looks to match the characters the constitute the token DoubleCloseSquareBracket
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mDoubleCloseSquareBracket()
{
    ANTLR_UINT32	_type;
      

    _type	    = DoubleCloseSquareBracket;


    // T.g:88:25: ( ']]' )
    // T.g:88:27: ']]'
    {
        this->matchs(lit_11);
        if  (this->hasException())
        {
            goto ruleDoubleCloseSquareBracketEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDoubleCloseSquareBracketEx; /* Prevent compiler warnings */
    ruleDoubleCloseSquareBracketEx: ;

}
// $ANTLR end DoubleCloseSquareBracket

//   Comes from: 90:10: ( '<<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ShiftLeft
 *
 * Looks to match the characters the constitute the token ShiftLeft
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mShiftLeft()
{
    ANTLR_UINT32	_type;
      

    _type	    = ShiftLeft;


    // T.g:90:10: ( '<<' )
    // T.g:90:21: '<<'
    {
        this->matchs(lit_12);
        if  (this->hasException())
        {
            goto ruleShiftLeftEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleShiftLeftEx; /* Prevent compiler warnings */
    ruleShiftLeftEx: ;

}
// $ANTLR end ShiftLeft

//   Comes from: 92:11: ( '>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ShiftRight
 *
 * Looks to match the characters the constitute the token ShiftRight
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mShiftRight()
{
    ANTLR_UINT32	_type;
      

    _type	    = ShiftRight;


    // T.g:92:11: ( '>>' )
    // T.g:92:21: '>>'
    {
        this->matchs(lit_13);
        if  (this->hasException())
        {
            goto ruleShiftRightEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleShiftRightEx; /* Prevent compiler warnings */
    ruleShiftRightEx: ;

}
// $ANTLR end ShiftRight

//   Comes from: 95:8: ( '$' Label )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start VarName
 *
 * Looks to match the characters the constitute the token VarName
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mVarName()
{
    ANTLR_UINT32	_type;
      

    _type	    = VarName;


    // T.g:95:8: ( '$' Label )
    // T.g:95:10: '$' Label
    {
         this->matchc('$');
        if  (this->hasException())
        {
            goto ruleVarNameEx;
        }


        /* 95:10: '$' Label */
        mLabel();
        if  (this->hasException())
        {
            goto ruleVarNameEx;
        }



    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleVarNameEx; /* Prevent compiler warnings */
    ruleVarNameEx: ;

}
// $ANTLR end VarName

//   Comes from: 97:9: ( Or Label )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ThenFunc
 *
 * Looks to match the characters the constitute the token ThenFunc
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mThenFunc()
{
    ANTLR_UINT32	_type;
      

    _type	    = ThenFunc;


    // T.g:97:9: ( Or Label )
    // T.g:97:11: Or Label
    {
        /* 97:11: Or Label */
        mOr();
        if  (this->hasException())
        {
            goto ruleThenFuncEx;
        }



        /* 97:11: Or Label */
        mLabel();
        if  (this->hasException())
        {
            goto ruleThenFuncEx;
        }



    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleThenFuncEx; /* Prevent compiler warnings */
    ruleThenFuncEx: ;

}
// $ANTLR end ThenFunc

//   Comes from: 99:4: ( '|' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Or
 *
 * Looks to match the characters the constitute the token Or
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mOr()
{
    ANTLR_UINT32	_type;
      

    _type	    = Or;


    // T.g:99:4: ( '|' )
    // T.g:99:6: '|'
    {
         this->matchc('|');
        if  (this->hasException())
        {
            goto ruleOrEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOrEx; /* Prevent compiler warnings */
    ruleOrEx: ;

}
// $ANTLR end Or

//   Comes from: 101:5: ( 'gte' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Gte
 *
 * Looks to match the characters the constitute the token Gte
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mGte()
{
    ANTLR_UINT32	_type;
      

    _type	    = Gte;


    // T.g:101:5: ( 'gte' )
    // T.g:101:7: 'gte'
    {
        this->matchs(lit_14);
        if  (this->hasException())
        {
            goto ruleGteEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleGteEx; /* Prevent compiler warnings */
    ruleGteEx: ;

}
// $ANTLR end Gte

//   Comes from: 103:5: ( 'set' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Set
 *
 * Looks to match the characters the constitute the token Set
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mSet()
{
    ANTLR_UINT32	_type;
      

    _type	    = Set;


    // T.g:103:5: ( 'set' )
    // T.g:103:7: 'set'
    {
        this->matchs(lit_15);
        if  (this->hasException())
        {
            goto ruleSetEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSetEx; /* Prevent compiler warnings */
    ruleSetEx: ;

}
// $ANTLR end Set

//   Comes from: 106:10: ( '<<silently>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Silently
 *
 * Looks to match the characters the constitute the token Silently
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mSilently()
{
    ANTLR_UINT32	_type;
      

    _type	    = Silently;


    // T.g:106:10: ( '<<silently>>' )
    // T.g:106:12: '<<silently>>'
    {
        this->matchs(lit_16);
        if  (this->hasException())
        {
            goto ruleSilentlyEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSilentlyEx; /* Prevent compiler warnings */
    ruleSilentlyEx: ;

}
// $ANTLR end Silently

//   Comes from: 107:12: ( '<<endsilently>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EndSilently
 *
 * Looks to match the characters the constitute the token EndSilently
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mEndSilently()
{
    ANTLR_UINT32	_type;
      

    _type	    = EndSilently;


    // T.g:107:12: ( '<<endsilently>>' )
    // T.g:107:14: '<<endsilently>>'
    {
        this->matchs(lit_17);
        if  (this->hasException())
        {
            goto ruleEndSilentlyEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleEndSilentlyEx; /* Prevent compiler warnings */
    ruleEndSilentlyEx: ;

}
// $ANTLR end EndSilently

//   Comes from: 109:8: ( 'choice' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Choice
 *
 * Looks to match the characters the constitute the token Choice
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mChoice()
{
    ANTLR_UINT32	_type;
      

    _type	    = Choice;


    // T.g:109:8: ( 'choice' )
    // T.g:109:10: 'choice'
    {
        this->matchs(lit_18);
        if  (this->hasException())
        {
            goto ruleChoiceEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleChoiceEx; /* Prevent compiler warnings */
    ruleChoiceEx: ;

}
// $ANTLR end Choice

//   Comes from: 111:12: ( ShiftLeft Choice )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ChoiceLeft
 *
 * Looks to match the characters the constitute the token ChoiceLeft
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mChoiceLeft()
{
    ANTLR_UINT32	_type;
      

    _type	    = ChoiceLeft;


    // T.g:111:12: ( ShiftLeft Choice )
    // T.g:111:14: ShiftLeft Choice
    {
        /* 111:14: ShiftLeft Choice */
        mShiftLeft();
        if  (this->hasException())
        {
            goto ruleChoiceLeftEx;
        }



        /* 111:14: ShiftLeft Choice */
        mChoice();
        if  (this->hasException())
        {
            goto ruleChoiceLeftEx;
        }



    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleChoiceLeftEx; /* Prevent compiler warnings */
    ruleChoiceLeftEx: ;

}
// $ANTLR end ChoiceLeft

//   Comes from: 113:4: ( 'if' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start If
 *
 * Looks to match the characters the constitute the token If
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mIf()
{
    ANTLR_UINT32	_type;
      

    _type	    = If;


    // T.g:113:4: ( 'if' )
    // T.g:113:6: 'if'
    {
        this->matchs(lit_19);
        if  (this->hasException())
        {
            goto ruleIfEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIfEx; /* Prevent compiler warnings */
    ruleIfEx: ;

}
// $ANTLR end If

//   Comes from: 115:8: ( 'elseif' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ElseIf
 *
 * Looks to match the characters the constitute the token ElseIf
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mElseIf()
{
    ANTLR_UINT32	_type;
      

    _type	    = ElseIf;


    // T.g:115:8: ( 'elseif' )
    // T.g:115:10: 'elseif'
    {
        this->matchs(lit_20);
        if  (this->hasException())
        {
            goto ruleElseIfEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleElseIfEx; /* Prevent compiler warnings */
    ruleElseIfEx: ;

}
// $ANTLR end ElseIf

//   Comes from: 117:7: ( 'endif' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EndIf
 *
 * Looks to match the characters the constitute the token EndIf
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mEndIf()
{
    ANTLR_UINT32	_type;
      

    _type	    = EndIf;


    // T.g:117:7: ( 'endif' )
    // T.g:117:9: 'endif'
    {
        this->matchs(lit_21);
        if  (this->hasException())
        {
            goto ruleEndIfEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleEndIfEx; /* Prevent compiler warnings */
    ruleEndIfEx: ;

}
// $ANTLR end EndIf

//   Comes from: 119:7: ( 'delay' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Delay
 *
 * Looks to match the characters the constitute the token Delay
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mDelay()
{
    ANTLR_UINT32	_type;
      

    _type	    = Delay;


    // T.g:119:7: ( 'delay' )
    // T.g:119:9: 'delay'
    {
        this->matchs(lit_22);
        if  (this->hasException())
        {
            goto ruleDelayEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDelayEx; /* Prevent compiler warnings */
    ruleDelayEx: ;

}
// $ANTLR end Delay

//   Comes from: 121:8: ( 'and' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start AndAnd
 *
 * Looks to match the characters the constitute the token AndAnd
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mAndAnd()
{
    ANTLR_UINT32	_type;
      

    _type	    = AndAnd;


    // T.g:121:8: ( 'and' )
    // T.g:121:10: 'and'
    {
        this->matchs(lit_23);
        if  (this->hasException())
        {
            goto ruleAndAndEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleAndAndEx; /* Prevent compiler warnings */
    ruleAndAndEx: ;

}
// $ANTLR end AndAnd

//   Comes from: 123:6: ( 'or' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OrOr
 *
 * Looks to match the characters the constitute the token OrOr
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mOrOr()
{
    ANTLR_UINT32	_type;
      

    _type	    = OrOr;


    // T.g:123:6: ( 'or' )
    // T.g:123:8: 'or'
    {
        this->matchs(lit_24);
        if  (this->hasException())
        {
            goto ruleOrOrEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOrOrEx; /* Prevent compiler warnings */
    ruleOrOrEx: ;

}
// $ANTLR end OrOr

//   Comes from: 129:5: ( '0' .. '9' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Digit
 *
 * Looks to match the characters the constitute the token Digit
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mDigit()
{
    ANTLR_UINT32	_type;
      


    // T.g:129:5: ( '0' .. '9' )
    // T.g:
    {
        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< TLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleDigitEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleDigitEx; /* Prevent compiler warnings */
    ruleDigitEx: ;

}
// $ANTLR end Digit

//   Comes from: 131:6: ( ( Digit )+ 's' | ( Digit )+ 'm' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Time
 *
 * Looks to match the characters the constitute the token Time
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mTime()
{
    ANTLR_UINT32	_type;
      

    _type	    = Time;


    {
        //  T.g:131:6: ( ( Digit )+ 's' | ( Digit )+ 'm' )

        ANTLR_UINT32 alt3;

        alt3=2;

        alt3 = cdfa3.predict(this, this->get_rec(), this->get_istream(), cdfa3 );
        if  (this->hasException())
        {
            goto ruleTimeEx;
        }

        switch (alt3)
        {
    	case 1:
    	    // T.g:131:8: ( Digit )+ 's'
    	    {
    	        // T.g:131:8: ( Digit )+
    	        {
    	            int cnt1=0;

    	            for (;;)
    	            {
    	                int alt1=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt1=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt1)
    	        	{
    	        	    case 1:
    	        	        // T.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< TLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleTimeEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt1 >= 1 )
    	        		{
    	        		    goto loop1;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< TLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleTimeEx;
    	        	}
    	        	cnt1++;
    	            }
    	            loop1: ;	/* Jump to here if this rule does not match */
    	        }

    	         this->matchc('s');
    	        if  (this->hasException())
    	        {
    	            goto ruleTimeEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // T.g:131:20: ( Digit )+ 'm'
    	    {
    	        // T.g:131:20: ( Digit )+
    	        {
    	            int cnt2=0;

    	            for (;;)
    	            {
    	                int alt2=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt2=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt2)
    	        	{
    	        	    case 1:
    	        	        // T.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< TLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleTimeEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt2 >= 1 )
    	        		{
    	        		    goto loop2;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< TLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleTimeEx;
    	        	}
    	        	cnt2++;
    	            }
    	            loop2: ;	/* Jump to here if this rule does not match */
    	        }

    	         this->matchc('m');
    	        if  (this->hasException())
    	        {
    	            goto ruleTimeEx;
    	        }


    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTimeEx; /* Prevent compiler warnings */
    ruleTimeEx: ;

}
// $ANTLR end Time

//   Comes from: 135:6: ( 'true' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start True
 *
 * Looks to match the characters the constitute the token True
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mTrue()
{
    ANTLR_UINT32	_type;
      

    _type	    = True;


    // T.g:135:6: ( 'true' )
    // T.g:135:8: 'true'
    {
        this->matchs(lit_25);
        if  (this->hasException())
        {
            goto ruleTrueEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTrueEx; /* Prevent compiler warnings */
    ruleTrueEx: ;

}
// $ANTLR end True

//   Comes from: 137:7: ( 'false' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start False
 *
 * Looks to match the characters the constitute the token False
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mFalse()
{
    ANTLR_UINT32	_type;
      

    _type	    = False;


    // T.g:137:7: ( 'false' )
    // T.g:137:9: 'false'
    {
        this->matchs(lit_26);
        if  (this->hasException())
        {
            goto ruleFalseEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleFalseEx; /* Prevent compiler warnings */
    ruleFalseEx: ;

}
// $ANTLR end False

//   Comes from: 140:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mCOMMENT()
{
    ANTLR_UINT32	_type;
      

    _type	    = COMMENT;


    // T.g:140:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
    // T.g:140:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    {
        this->matchs(lit_27);
        if  (this->hasException())
        {
            goto ruleCOMMENTEx;
        }




        // T.g:140:14: (~ ( '\\n' | '\\r' ) )*

        for (;;)
        {
            int alt4=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA4_0 = this->LA(1);
                if ( (((LA4_0 >= 0x0000) && (LA4_0 <= '\t')) || ((LA4_0 >= 0x000B) && (LA4_0 <= '\f')) || ((LA4_0 >= 0x000E) && (LA4_0 <= 0xFFFF))))
                {
                    alt4=1;
                }

            }
            switch (alt4)
            {
        	case 1:
        	    // T.g:
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '\t')) || ((this->LA(1) >= 0x000B) && (this->LA(1) <= '\f')) || ((this->LA(1) >= 0x000E) && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< TLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleCOMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop4;	/* break out of the loop */
        	    break;
            }
        }
        loop4: ; /* Jump out to here if this rule does not match */


        // T.g:140:28: ( '\\r' )?
        {
            int alt5=2;
            switch ( this->LA(1) )
            {
                case '\r':
                	{
                		alt5=1;
                	}
                    break;
            }

            switch (alt5)
            {
        	case 1:
        	    // T.g:140:28: '\\r'
        	    {
        	         this->matchc('\r');
        	        if  (this->hasException())
        	        {
        	            goto ruleCOMMENTEx;
        	        }


        	    }
        	    break;

            }
        }

         this->matchc('\n');
        if  (this->hasException())
        {
            goto ruleCOMMENTEx;
        }


        {
            this->get_state()->get_channel()=HIDDEN;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

//   Comes from: 143:7: ( '\"' (~ ( '\"' ) )* '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start String
 *
 * Looks to match the characters the constitute the token String
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mString()
{
    ANTLR_UINT32	_type;
      

    _type	    = String;


    // T.g:143:7: ( '\"' (~ ( '\"' ) )* '\"' )
    // T.g:143:9: '\"' (~ ( '\"' ) )* '\"'
    {
         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleStringEx;
        }


        // T.g:143:13: (~ ( '\"' ) )*

        for (;;)
        {
            int alt6=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA6_0 = this->LA(1);
                if ( (((LA6_0 >= 0x0000) && (LA6_0 <= '!')) || ((LA6_0 >= '#') && (LA6_0 <= 0xFFFF))))
                {
                    alt6=1;
                }

            }
            switch (alt6)
            {
        	case 1:
        	    // T.g:
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '!')) || ((this->LA(1) >= '#') && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< TLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleStringEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop6;	/* break out of the loop */
        	    break;
            }
        }
        loop6: ; /* Jump out to here if this rule does not match */


         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleStringEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleStringEx; /* Prevent compiler warnings */
    ruleStringEx: ;

}
// $ANTLR end String

//   Comes from: 145:6: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Label
 *
 * Looks to match the characters the constitute the token Label
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mLabel()
{
    ANTLR_UINT32	_type;
      

    _type	    = Label;


    // T.g:145:6: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
    // T.g:145:8: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    {
        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< TLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleLabelEx;
        }


        // T.g:145:39: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*

        for (;;)
        {
            int alt7=2;
            switch ( this->LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt7=1;
            	}
                break;

            }

            switch (alt7)
            {
        	case 1:
        	    // T.g:
        	    {
        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< TLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleLabelEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop7;	/* break out of the loop */
        	    break;
            }
        }
        loop7: ; /* Jump out to here if this rule does not match */


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLabelEx; /* Prevent compiler warnings */
    ruleLabelEx: ;

}
// $ANTLR end Label

//   Comes from: 147:5: ( '#' (~ ( '#' ) )+ '#' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TEXT
 *
 * Looks to match the characters the constitute the token TEXT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mTEXT()
{
    ANTLR_UINT32	_type;
      

    _type	    = TEXT;


    // T.g:147:5: ( '#' (~ ( '#' ) )+ '#' )
    // T.g:147:7: '#' (~ ( '#' ) )+ '#'
    {
         this->matchc('#');
        if  (this->hasException())
        {
            goto ruleTEXTEx;
        }


        // T.g:147:11: (~ ( '#' ) )+
        {
            int cnt8=0;

            for (;;)
            {
                int alt8=2;
        	{
        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	    */
        	    int LA8_0 = this->LA(1);
        	    if ( (((LA8_0 >= 0x0000) && (LA8_0 <= '"')) || ((LA8_0 >= '$') && (LA8_0 <= 0xFFFF))))
        	    {
        	        alt8=1;
        	    }

        	}
        	switch (alt8)
        	{
        	    case 1:
        	        // T.g:
        	        {
        	            if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '"')) || ((this->LA(1) >= '$') && (this->LA(1) <= 0xFFFF)) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< TLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleTEXTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt8 >= 1 )
        		{
        		    goto loop8;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< TLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleTEXTEx;
        	}
        	cnt8++;
            }
            loop8: ;	/* Jump to here if this rule does not match */
        }

         this->matchc('#');
        if  (this->hasException())
        {
            goto ruleTEXTEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTEXTEx; /* Prevent compiler warnings */
    ruleTEXTEx: ;

}
// $ANTLR end TEXT

//   Comes from: 149:5: ( ( ' ' | '\\r' | '\\n' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void TLexer::mWS()
{
    ANTLR_UINT32	_type;
      

    _type	    = WS;


    // T.g:149:5: ( ( ' ' | '\\r' | '\\n' )+ )
    // T.g:149:7: ( ' ' | '\\r' | '\\n' )+
    {
        // T.g:149:7: ( ' ' | '\\r' | '\\n' )+
        {
            int cnt9=0;

            for (;;)
            {
                int alt9=2;
        	switch ( this->LA(1) )
        	{
        	case '\n':
        	case '\r':
        	case ' ':
        		{
        			alt9=1;
        		}
        	    break;

        	}

        	switch (alt9)
        	{
        	    case 1:
        	        // T.g:
        	        {
        	            if ( this->LA(1) == '\n' || this->LA(1) == '\r' || this->LA(1) == ' ' )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< TLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleWSEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt9 >= 1 )
        		{
        		    goto loop9;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< TLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleWSEx;
        	}
        	cnt9++;
            }
            loop9: ;	/* Jump to here if this rule does not match */
        }

        {
            skip();
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
TLexer::mTokens()
{
    {
        //  T.g:1:8: ( T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | FuncDec | Equal | Minus | Dollar | Assign | PlusAssign | MinusAssign | DoubleOpenSquareBracket | DoubleCloseSquareBracket | ShiftLeft | ShiftRight | VarName | ThenFunc | Or | Gte | Set | Silently | EndSilently | Choice | ChoiceLeft | If | ElseIf | EndIf | Delay | AndAnd | OrOr | Time | True | False | COMMENT | String | Label | TEXT | WS )

        ANTLR_UINT32 alt10;

        alt10=40;

        switch ( this->LA(1) )
        {
        case '+':
        	{
        		switch ( this->LA(2) )
        		{
        		case '=':
        			{
        				alt10=12;
        			}
        		    break;

        		default:
        		    alt10=1;
        		}

        	}
            break;
        case '<':
        	{
        		switch ( this->LA(2) )
        		{
        		case '<':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'e':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'l':
        							{
        								switch ( this->LA(5) )
        								{
        								case 's':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'e':
        											{
        												switch ( this->LA(7) )
        												{
        												case '>':
        													{
        														alt10=2;
        													}
        												    break;
        												case 'i':
        													{
        														alt10=3;
        													}
        												    break;

        												default:
        												    ExceptionBaseType* ex = new ANTLR_Exception< TLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        												    ex->set_decisionNum( 10 );
        												    ex->set_state( 86 );


        												    goto ruleTokensEx;

        												}

        											}
        										    break;

        										default:
        										    ExceptionBaseType* ex = new ANTLR_Exception< TLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        										    ex->set_decisionNum( 10 );
        										    ex->set_state( 78 );


        										    goto ruleTokensEx;

        										}

        									}
        								    break;

        								default:
        								    ExceptionBaseType* ex = new ANTLR_Exception< TLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        								    ex->set_decisionNum( 10 );
        								    ex->set_state( 65 );


        								    goto ruleTokensEx;

        								}

        							}
        						    break;
        						case 'n':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'd':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'i':
        											{
        												alt10=4;
        											}
        										    break;
        										case 's':
        											{
        												alt10=24;
        											}
        										    break;

        										default:
        										    ExceptionBaseType* ex = new ANTLR_Exception< TLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        										    ex->set_decisionNum( 10 );
        										    ex->set_state( 79 );


        										    goto ruleTokensEx;

        										}

        									}
        								    break;

        								default:
        								    ExceptionBaseType* ex = new ANTLR_Exception< TLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        								    ex->set_decisionNum( 10 );
        								    ex->set_state( 66 );


        								    goto ruleTokensEx;

        								}

        							}
        						    break;

        						default:
        						    ExceptionBaseType* ex = new ANTLR_Exception< TLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        						    ex->set_decisionNum( 10 );
        						    ex->set_state( 48 );


        						    goto ruleTokensEx;

        						}

        					}
        				    break;
        				case 'i':
        					{
        						alt10=5;
        					}
        				    break;
        				case 's':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'e':
        							{
        								alt10=6;
        							}
        						    break;
        						case 'i':
        							{
        								alt10=23;
        							}
        						    break;

        						default:
        						    ExceptionBaseType* ex = new ANTLR_Exception< TLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        						    ex->set_decisionNum( 10 );
        						    ex->set_state( 50 );


        						    goto ruleTokensEx;

        						}

        					}
        				    break;
        				case 'c':
        					{
        						alt10=26;
        					}
        				    break;

        				default:
        				    alt10=16;
        				}

        			}
        		    break;

        		default:
        		    ExceptionBaseType* ex = new ANTLR_Exception< TLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        		    ex->set_decisionNum( 10 );
        		    ex->set_state( 2 );


        		    goto ruleTokensEx;

        		}

        	}
            break;
        case ':':
        	{
        		alt10=7;
        	}
            break;
        case 'i':
        	{
        		switch ( this->LA(2) )
        		{
        		case 's':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt10=38;
        					}
        				    break;

        				default:
        				    alt10=8;
        				}

        			}
        		    break;
        		case 'f':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt10=38;
        					}
        				    break;

        				default:
        				    alt10=27;
        				}

        			}
        		    break;

        		default:
        		    alt10=38;
        		}

        	}
            break;
        case '-':
        	{
        		switch ( this->LA(2) )
        		{
        		case '=':
        			{
        				alt10=13;
        			}
        		    break;

        		default:
        		    alt10=9;
        		}

        	}
            break;
        case '$':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'A':
        		case 'B':
        		case 'C':
        		case 'D':
        		case 'E':
        		case 'F':
        		case 'G':
        		case 'H':
        		case 'I':
        		case 'J':
        		case 'K':
        		case 'L':
        		case 'M':
        		case 'N':
        		case 'O':
        		case 'P':
        		case 'Q':
        		case 'R':
        		case 'S':
        		case 'T':
        		case 'U':
        		case 'V':
        		case 'W':
        		case 'X':
        		case 'Y':
        		case 'Z':
        		case '_':
        		case 'a':
        		case 'b':
        		case 'c':
        		case 'd':
        		case 'e':
        		case 'f':
        		case 'g':
        		case 'h':
        		case 'i':
        		case 'j':
        		case 'k':
        		case 'l':
        		case 'm':
        		case 'n':
        		case 'o':
        		case 'p':
        		case 'q':
        		case 'r':
        		case 's':
        		case 't':
        		case 'u':
        		case 'v':
        		case 'w':
        		case 'x':
        		case 'y':
        		case 'z':
        			{
        				alt10=18;
        			}
        		    break;

        		default:
        		    alt10=10;
        		}

        	}
            break;
        case '=':
        	{
        		alt10=11;
        	}
            break;
        case '[':
        	{
        		alt10=14;
        	}
            break;
        case ']':
        	{
        		alt10=15;
        	}
            break;
        case '>':
        	{
        		alt10=17;
        	}
            break;
        case '|':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'A':
        		case 'B':
        		case 'C':
        		case 'D':
        		case 'E':
        		case 'F':
        		case 'G':
        		case 'H':
        		case 'I':
        		case 'J':
        		case 'K':
        		case 'L':
        		case 'M':
        		case 'N':
        		case 'O':
        		case 'P':
        		case 'Q':
        		case 'R':
        		case 'S':
        		case 'T':
        		case 'U':
        		case 'V':
        		case 'W':
        		case 'X':
        		case 'Y':
        		case 'Z':
        		case '_':
        		case 'a':
        		case 'b':
        		case 'c':
        		case 'd':
        		case 'e':
        		case 'f':
        		case 'g':
        		case 'h':
        		case 'i':
        		case 'j':
        		case 'k':
        		case 'l':
        		case 'm':
        		case 'n':
        		case 'o':
        		case 'p':
        		case 'q':
        		case 'r':
        		case 's':
        		case 't':
        		case 'u':
        		case 'v':
        		case 'w':
        		case 'x':
        		case 'y':
        		case 'z':
        			{
        				alt10=19;
        			}
        		    break;

        		default:
        		    alt10=20;
        		}

        	}
            break;
        case 'g':
        	{
        		switch ( this->LA(2) )
        		{
        		case 't':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'e':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt10=38;
        							}
        						    break;

        						default:
        						    alt10=21;
        						}

        					}
        				    break;

        				default:
        				    alt10=38;
        				}

        			}
        		    break;

        		default:
        		    alt10=38;
        		}

        	}
            break;
        case 's':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'e':
        			{
        				switch ( this->LA(3) )
        				{
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt10=38;
        							}
        						    break;

        						default:
        						    alt10=22;
        						}

        					}
        				    break;

        				default:
        				    alt10=38;
        				}

        			}
        		    break;

        		default:
        		    alt10=38;
        		}

        	}
            break;
        case 'c':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'h':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'o':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'i':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'c':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'e':
        											{
        												switch ( this->LA(7) )
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt10=38;
        													}
        												    break;

        												default:
        												    alt10=25;
        												}

        											}
        										    break;

        										default:
        										    alt10=38;
        										}

        									}
        								    break;

        								default:
        								    alt10=38;
        								}

        							}
        						    break;

        						default:
        						    alt10=38;
        						}

        					}
        				    break;

        				default:
        				    alt10=38;
        				}

        			}
        		    break;

        		default:
        		    alt10=38;
        		}

        	}
            break;
        case 'e':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'l':
        			{
        				switch ( this->LA(3) )
        				{
        				case 's':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'e':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'i':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'f':
        											{
        												switch ( this->LA(7) )
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt10=38;
        													}
        												    break;

        												default:
        												    alt10=28;
        												}

        											}
        										    break;

        										default:
        										    alt10=38;
        										}

        									}
        								    break;

        								default:
        								    alt10=38;
        								}

        							}
        						    break;

        						default:
        						    alt10=38;
        						}

        					}
        				    break;

        				default:
        				    alt10=38;
        				}

        			}
        		    break;
        		case 'n':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'd':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'i':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'f':
        									{
        										switch ( this->LA(6) )
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=38;
        											}
        										    break;

        										default:
        										    alt10=29;
        										}

        									}
        								    break;

        								default:
        								    alt10=38;
        								}

        							}
        						    break;

        						default:
        						    alt10=38;
        						}

        					}
        				    break;

        				default:
        				    alt10=38;
        				}

        			}
        		    break;

        		default:
        		    alt10=38;
        		}

        	}
            break;
        case 'd':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'e':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'l':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'a':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'y':
        									{
        										switch ( this->LA(6) )
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=38;
        											}
        										    break;

        										default:
        										    alt10=30;
        										}

        									}
        								    break;

        								default:
        								    alt10=38;
        								}

        							}
        						    break;

        						default:
        						    alt10=38;
        						}

        					}
        				    break;

        				default:
        				    alt10=38;
        				}

        			}
        		    break;

        		default:
        		    alt10=38;
        		}

        	}
            break;
        case 'a':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'n':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'd':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt10=38;
        							}
        						    break;

        						default:
        						    alt10=31;
        						}

        					}
        				    break;

        				default:
        				    alt10=38;
        				}

        			}
        		    break;

        		default:
        		    alt10=38;
        		}

        	}
            break;
        case 'o':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'r':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt10=38;
        					}
        				    break;

        				default:
        				    alt10=32;
        				}

        			}
        		    break;

        		default:
        		    alt10=38;
        		}

        	}
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		alt10=33;
        	}
            break;
        case 't':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'r':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'u':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'e':
        							{
        								switch ( this->LA(5) )
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt10=38;
        									}
        								    break;

        								default:
        								    alt10=34;
        								}

        							}
        						    break;

        						default:
        						    alt10=38;
        						}

        					}
        				    break;

        				default:
        				    alt10=38;
        				}

        			}
        		    break;

        		default:
        		    alt10=38;
        		}

        	}
            break;
        case 'f':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'a':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'l':
        					{
        						switch ( this->LA(4) )
        						{
        						case 's':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=38;
        											}
        										    break;

        										default:
        										    alt10=35;
        										}

        									}
        								    break;

        								default:
        								    alt10=38;
        								}

        							}
        						    break;

        						default:
        						    alt10=38;
        						}

        					}
        				    break;

        				default:
        				    alt10=38;
        				}

        			}
        		    break;

        		default:
        		    alt10=38;
        		}

        	}
            break;
        case '/':
        	{
        		alt10=36;
        	}
            break;
        case '"':
        	{
        		alt10=37;
        	}
            break;
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '_':
        case 'b':
        case 'h':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'p':
        case 'q':
        case 'r':
        case 'u':
        case 'v':
        case 'w':
        case 'x':
        case 'y':
        case 'z':
        	{
        		alt10=38;
        	}
            break;
        case '#':
        	{
        		alt10=39;
        	}
            break;
        case '\n':
        case '\r':
        case ' ':
        	{
        		alt10=40;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< TLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 10 );
            ex->set_state( 0 );


            goto ruleTokensEx;

        }

        switch (alt10)
        {
    	case 1:
    	    // T.g:1:10: T__39
    	    {
    	        /* 1:10: T__39 */
    	        mT__39();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // T.g:1:16: T__40
    	    {
    	        /* 1:16: T__40 */
    	        mT__40();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // T.g:1:22: T__41
    	    {
    	        /* 1:22: T__41 */
    	        mT__41();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // T.g:1:28: T__42
    	    {
    	        /* 1:28: T__42 */
    	        mT__42();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // T.g:1:34: T__43
    	    {
    	        /* 1:34: T__43 */
    	        mT__43();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // T.g:1:40: T__44
    	    {
    	        /* 1:40: T__44 */
    	        mT__44();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // T.g:1:46: FuncDec
    	    {
    	        /* 1:46: FuncDec */
    	        mFuncDec();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // T.g:1:54: Equal
    	    {
    	        /* 1:54: Equal */
    	        mEqual();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // T.g:1:60: Minus
    	    {
    	        /* 1:60: Minus */
    	        mMinus();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // T.g:1:66: Dollar
    	    {
    	        /* 1:66: Dollar */
    	        mDollar();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // T.g:1:73: Assign
    	    {
    	        /* 1:73: Assign */
    	        mAssign();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // T.g:1:80: PlusAssign
    	    {
    	        /* 1:80: PlusAssign */
    	        mPlusAssign();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // T.g:1:91: MinusAssign
    	    {
    	        /* 1:91: MinusAssign */
    	        mMinusAssign();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // T.g:1:103: DoubleOpenSquareBracket
    	    {
    	        /* 1:103: DoubleOpenSquareBracket */
    	        mDoubleOpenSquareBracket();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // T.g:1:127: DoubleCloseSquareBracket
    	    {
    	        /* 1:127: DoubleCloseSquareBracket */
    	        mDoubleCloseSquareBracket();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // T.g:1:152: ShiftLeft
    	    {
    	        /* 1:152: ShiftLeft */
    	        mShiftLeft();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // T.g:1:162: ShiftRight
    	    {
    	        /* 1:162: ShiftRight */
    	        mShiftRight();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // T.g:1:173: VarName
    	    {
    	        /* 1:173: VarName */
    	        mVarName();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // T.g:1:181: ThenFunc
    	    {
    	        /* 1:181: ThenFunc */
    	        mThenFunc();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // T.g:1:190: Or
    	    {
    	        /* 1:190: Or */
    	        mOr();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    // T.g:1:193: Gte
    	    {
    	        /* 1:193: Gte */
    	        mGte();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    // T.g:1:197: Set
    	    {
    	        /* 1:197: Set */
    	        mSet();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    // T.g:1:201: Silently
    	    {
    	        /* 1:201: Silently */
    	        mSilently();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 24:
    	    // T.g:1:210: EndSilently
    	    {
    	        /* 1:210: EndSilently */
    	        mEndSilently();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 25:
    	    // T.g:1:222: Choice
    	    {
    	        /* 1:222: Choice */
    	        mChoice();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 26:
    	    // T.g:1:229: ChoiceLeft
    	    {
    	        /* 1:229: ChoiceLeft */
    	        mChoiceLeft();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 27:
    	    // T.g:1:240: If
    	    {
    	        /* 1:240: If */
    	        mIf();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 28:
    	    // T.g:1:243: ElseIf
    	    {
    	        /* 1:243: ElseIf */
    	        mElseIf();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 29:
    	    // T.g:1:250: EndIf
    	    {
    	        /* 1:250: EndIf */
    	        mEndIf();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 30:
    	    // T.g:1:256: Delay
    	    {
    	        /* 1:256: Delay */
    	        mDelay();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 31:
    	    // T.g:1:262: AndAnd
    	    {
    	        /* 1:262: AndAnd */
    	        mAndAnd();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 32:
    	    // T.g:1:269: OrOr
    	    {
    	        /* 1:269: OrOr */
    	        mOrOr();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 33:
    	    // T.g:1:274: Time
    	    {
    	        /* 1:274: Time */
    	        mTime();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 34:
    	    // T.g:1:279: True
    	    {
    	        /* 1:279: True */
    	        mTrue();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 35:
    	    // T.g:1:284: False
    	    {
    	        /* 1:284: False */
    	        mFalse();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 36:
    	    // T.g:1:290: COMMENT
    	    {
    	        /* 1:290: COMMENT */
    	        mCOMMENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 37:
    	    // T.g:1:298: String
    	    {
    	        /* 1:298: String */
    	        mString();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 38:
    	    // T.g:1:305: Label
    	    {
    	        /* 1:305: Label */
    	        mLabel();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 39:
    	    // T.g:1:311: TEXT
    	    {
    	        /* 1:311: TEXT */
    	        mTEXT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 40:
    	    // T.g:1:316: WS
    	    {
    	        /* 1:316: WS */
    	        mWS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */



/* End of code
 * =============================================================================
 */
